from django.test import TestCase, RequestFactory
from django.urls import reverse
from django.contrib.auth.models import User

from profiles.models import UserProfile
from support.forms import ContactForm
from support.views import ContactView


class ContactViewTest(TestCase):
    """
    Test Case for Support Contact View
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.url = reverse("contact")

    @classmethod
    def tearDownClass(cls):
        super().tearDownClass()

    def setUp(self):
        """
        Test Data
        """
        self.form_data = {
            "name": "John Doe",
            "email": "johndoe@test.com",
            "subject": "Test message",
            "message": "This is a test.",
        }

        self.user = User.objects.filter(username="testuser").first()
        if not self.user:
            self.user = User.objects.create_user(
                username="testuser",
                email="testuser@test.com",
                password="testpass",
            )
        self.user_profile = UserProfile.objects.filter(user=self.user).first()
        if not self.user_profile:
            self.user_profile = UserProfile.objects.create(
                user=self.user, default_full_name="Test User"
            )
        self.factory = RequestFactory()

    def test_contact_view_url(self):
        """
        Test Contact View URL
        """
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 200)

    def test_contact_view_template(self):
        """
        Test Contact View uses correct template
        """
        response = self.client.get(self.url)
        self.assertTemplateUsed(response, "support/contact.html")

    def test_contact_view_uses_correct_form(self):
        """
        Test Contact View uses correct form
        """
        response = self.client.get(self.url)
        self.assertIsInstance(response.context["form"], ContactForm)

    def test_contact_view_form_valid(self):
        """
        Test Contact View form is valid
        """
        response = self.client.post(self.url, data=self.form_data)
        self.assertRedirects(response, reverse("index"))

    def test_contact_view_form_invalid(self):
        """
        Test Contact View form is invalid
        """
        self.form_data["subject"] = ""
        response = self.client.post(self.url, data=self.form_data)
        self.assertEqual(response.status_code, 200)

    def test_contact_view_get_form_kwargs(self):
        """
        Test Contact View and test  whether the initial data
        of the form generated by the view is correctly set.
        """
        self.client.login(username="testuser", password="testpass")
        response = self.client.get(self.url)
        form = response.context_data["form"]
        expected_initial = {
            "name": self.user_profile.default_full_name,
            "email": self.user.email,
        }
        self.assertEqual(form.initial, expected_initial)

    def test_contact_view_get_success_url(self):
        """
        Test Contact View get the success url
        """
        request = RequestFactory().get("/")
        request.session = self.client.session
        request.session["previous_page"] = "/previous_page/"
        view = ContactView()
        view.request = request
        self.assertEqual(view.get_success_url(), "/previous_page/")
