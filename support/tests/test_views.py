from django.conf import settings
from django.contrib.auth.models import User
from django.core import mail
from django.test import RequestFactory, TestCase
from django.urls import reverse

from profiles.models import UserProfile
from support.forms import ContactForm
from support.views import ContactView


class ContactViewTest(TestCase):
    """
    Test Case for Support Contact View
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.url = reverse("contact")

    @classmethod
    def tearDownClass(cls):
        super().tearDownClass()

    def setUp(self):
        """
        Test Data
        """
        self.form_data = {
            "name": "John Doe",
            "email": "johndoe@test.com",
            "subject": "Test message",
            "message": "This is a test.",
        }

        self.user = User.objects.filter(username="testuser").first()
        if not self.user:
            self.user = User.objects.create_user(
                username="testuser",
                email="testuser@test.com",
                password="testpass",
            )
        self.user_profile = UserProfile.objects.filter(user=self.user).first()
        if not self.user_profile:
            self.user_profile = UserProfile.objects.create(
                user=self.user, default_full_name="Test User"
            )
        self.factory = RequestFactory()

    def test_contact_view_url(self):
        """
        Test Contact View URL
        """
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, 200)

    def test_contact_view_template(self):
        """
        Test Contact View uses correct template
        """
        response = self.client.get(self.url)
        self.assertTemplateUsed(response, "support/contact.html")

    def test_contact_view_uses_correct_form(self):
        """
        Test Contact View uses correct form
        """
        response = self.client.get(self.url)
        self.assertIsInstance(response.context["form"], ContactForm)

    def test_contact_view_form_valid(self):
        """
        Test Contact View form is valid
        """
        response = self.client.post(self.url, data=self.form_data)
        self.assertRedirects(response, reverse("index"))

    def test_contact_view_form_invalid(self):
        """
        Test Contact View form is invalid
        """
        self.form_data["subject"] = ""
        response = self.client.post(self.url, data=self.form_data)
        self.assertContains(response, "This field is required.")
        self.assertEqual(response.status_code, 200)

    def test_contact_view_get_form_kwargs(self):
        """
        Test Contact View and test  whether the initial data
        of the form generated by the view is correctly set.
        """
        self.client.login(username="testuser", password="testpass")
        response = self.client.get(self.url)
        form = response.context_data["form"]
        expected_initial = {
            "name": self.user_profile.default_full_name,
            "email": self.user.email,
        }
        self.assertEqual(form.initial, expected_initial)

    def test_contact_view_get_success_url(self):
        """
        Test Contact View get the success url
        """
        request = RequestFactory().get("/")
        request.session = self.client.session
        request.session["previous_page"] = "/previous_page/"
        view = ContactView()
        view.request = request
        self.assertEqual(view.get_success_url(), "/previous_page/")

    def test_contact_view_email_sent(self):
        """
        Test Contact View sends email
        """
        self.client.post(self.url, data=self.form_data)
        # Test that one message has been sent
        self.assertEqual(len(mail.outbox), 1)
        # Test that the email content is correct
        sent_email = mail.outbox[0]
        self.assertEqual(sent_email.subject, "Test message")
        # Check that sender is the user submitting the form
        self.assertEqual(sent_email.from_email, "johndoe@test.com")
        # Check that email has been sent to the correct recipient
        self.assertEqual(sent_email.to, [settings.DEFAULT_FROM_EMAIL])
        expected_body = "John Doe" + " wrote, \n\n" + "This is a test."
        self.assertIn(expected_body, sent_email.body)

    def test_contact_view_get(self):
        """
        Test Contact View sets previous_page in session
        """
        response = self.client.get(self.url)
        if "HTTP_REFERER" in response.request:
            self.assertEqual(
                self.client.session.get("previous_page"),
                response.request["HTTP_REFERER"],
            )


class FaqViewTest(TestCase):
    """
    Test Case for Support FAQs View
    """

    def test_faq_view(self):
        """
        Test FAQ View template
        """
        url = reverse("faq")
        response = self.client.get(url)
        # Expect that the request was successful
        self.assertEqual(response.status_code, 200)
        # Check that the correct template was used to render the page
        self.assertTemplateUsed(response, "support/faq.html")


class PrivacyPolicyTest(TestCase):
    """
    Test Case for Support Privacy Policy View
    """

    def test_privacy_policy_view(self):
        """
        Test Privacy Policy View template
        """
        url = reverse("privacy_policy")
        response = self.client.get(url)
        # Expect that the request was successful
        self.assertEqual(response.status_code, 200)
        # Check that the correct template was used to render the page
        self.assertTemplateUsed(response, "support/privacy_policy.html")


class ReturnPolicyTest(TestCase):
    """
    Test Case for Support Return Policy View
    """

    def test_return_policy_view(self):
        """
        Test Return Policy View template
        """
        url = reverse("return_policy")
        response = self.client.get(url)
        # Expect that the request was successful
        self.assertEqual(response.status_code, 200)
        # Check that the correct template was used to render the page
        self.assertTemplateUsed(response, "support/return_policy.html")


class TermsAndConditionsTest(TestCase):
    """
    Test Case for Support Terms and Conditions View
    """

    def test_terms_and_conditions_view(self):
        """
        Test Terms and Conditions View template
        """
        url = reverse("terms_and_conditions")
        response = self.client.get(url)
        # Expect that the request was successful
        self.assertEqual(response.status_code, 200)
        # Check that the correct template was used to render the page
        self.assertTemplateUsed(response, "support/tcs.html")
